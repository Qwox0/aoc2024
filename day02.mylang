main :: -> {
    part1();
    part2();
    0
}

position :: (slice: []u8, target: u8) -> i64 {
    0..slice.len | for idx {
        if slice[idx] == target return idx.as(i64);
    }
    return -1;
}

parse_num :: (line: *mut []u8) -> i64 {
    num := strtol(line.*.ptr, nil, 10);
    num_len := line.* | position(' ');
    line.* = if num_len == -1 do line.*[..0] else line.*[num_len + 1..];
    num
}

abs :: (x: i64) -> if x < 0 { -x } else x;

sign :: (x: i64) -> i64 {
    if x > 0 return 1;
    if x < 0 return -1;
    0

}

part1 :: -> {
    input := read_file_as_string_slice("./day02.in");
    defer free(input.ptr.as(*void));

    mut res := 0;

    mut lines := input[..];
    while true {
        len := lines | position('\n');
        if len == -1 break;
        line := lines[..len];
        lines = lines[len + 1..];

        mut numbers := line;
        mut prev_num := parse_num(&mut numbers);
        mut prev_diff_sign := 0;
        mut is_valid := true;
        while numbers.len > 0 {
            num := parse_num(&mut numbers);
            diff := num - prev_num;
            prev_num = num;

            if abs(diff) > 3 || diff == 0 {
                is_valid = false;
            }

            if sign(diff) != prev_diff_sign && prev_diff_sign != 0 {
                is_valid = false;
            }
            prev_diff_sign = sign(diff);
        }
        if is_valid do res += 1;
    }

    printf("result of part 1: %d\n".ptr, res); // 306
}

part2 :: -> {
    input := read_file_as_string_slice("./day02.in");
    defer free(input.ptr.as(*void));

    mut res := 0;

    mut lines := input[..];
    while true {
        len := lines | position('\n');
        if len == -1 break;
        line := lines[..len];
        lines = lines[len + 1..];

        -1.. | for skip_idx {
            mut number_idx := 0;
            mut numbers := line[..];
            mut prev_num := -1;
            mut prev_diff_sign := 0;
            mut is_valid := true;
            while numbers.len > 0 {
                num := parse_num(&mut numbers);
                number_idx += 1;
                if number_idx == skip_idx continue;
                if prev_num == -1 {
                    prev_num = num;
                    continue;
                }
                diff := num - prev_num;

                if abs(diff) > 3 || diff == 0
                    || (sign(diff) != prev_diff_sign && prev_diff_sign != 0)
                {
                    is_valid = false;
                } else {
                    prev_num = num;
                    prev_diff_sign = sign(diff);
                }
            }

            if is_valid {
                res += 1;
                break;
            }

            if skip_idx == number_idx + 1 {
                break
            }
        }
    }

    printf("result of part 2: %d\n".ptr, res); // 366
}
