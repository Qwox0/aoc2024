std :: #import "std";
libc :: #import "libc";

main :: -> {
    part1();
    part2();
    0
}

compare_long :: (l: *void, r: *void) -> libc.c_int {
    l := l.as(*libc.c_long).*;
    r := r.as(*libc.c_long).*;
    if l > r return 1;
    if l < r return -1;
    return 0;
}

abs :: (x: i64) -> if x < 0 { -x } else x;

part1 :: -> {
    input := std.read_file_as_string_slice("./day01.in");
    defer libc.free(input.ptr.as(*void));
    input_lines : u64 : 1000;
    line_len : u64 : 14;

    mut left_numbers: [input_lines]i64;
    mut right_numbers: [input_lines]i64;

    0..input_lines |> for idx {
        line_text := input[idx * line_len..input.len];
        left_numbers[idx] = libc.strtol(line_text.ptr, nil, 10);
        right_numbers[idx] = libc.strtol(line_text[8..8].ptr, nil, 10);
    }

    libc.qsort(left_numbers.&.as(*void), input_lines, 8, &compare_long);
    libc.qsort(right_numbers.&.as(*void), input_lines, 8, &compare_long);

    mut res := 0;
    0..input_lines |> for idx {
        res += abs(left_numbers[idx] - right_numbers[idx]);
    }

    libc.printf("result of part 1: %d\n".ptr, res);
    std.assert(res == 1941353);
}

position :: (arr: []i64, target: i64) -> i64 {
    0..arr.len |> for idx {
        if arr[idx] == target return idx.as(i64);
    }
    return -1;
}

part2 :: -> {
    input := std.read_file_as_string_slice("./day01.in");
    defer libc.free(input.ptr.as(*void));
    input_lines : u64 : 1000;
    line_len : u64 : 14;

    mut left_numbers: [input_lines]i64;
    mut right_numbers: [input_lines]i64;

    0..input_lines |> for idx {
        line_text := input[idx * line_len..input.len];
        left_numbers[idx] = libc.strtol(line_text.ptr, nil, 10);
        right_numbers[idx] = libc.strtol(line_text[8..8].ptr, nil, 10);
    }

    libc.qsort(left_numbers.&.as(*void), input_lines, 8, &compare_long);
    libc.qsort(right_numbers.&.as(*void), input_lines, 8, &compare_long);

    mut res := 0;
    left_numbers |> for l {
        pos := right_numbers[..] |> position(l);
        if pos == -1 continue;
        mut count := 1;
        while right_numbers[pos + count] == l {
            count += 1;
        }
        res += l * count;
    }

    libc.printf("result of part 2: %d\n".ptr, res);
    std.assert(res == 22539317);
}
